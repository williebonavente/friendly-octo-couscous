import { Token, Parser } from 'cst';
import { readFileSync, writeFileSync } from 'fs';
import { extname } from 'path';
import yargs from 'yargs';

var requiredTokenTypes = ['VariableDeclarator', 'FunctionDeclaration', 'ClassDeclaration'];
var map = {};
function randomizeCase(ast) {
  ast.selectTokensByType('Identifier').forEach(function (token) {
    if (token.parentElement.parentElement.type === 'FunctionDeclaration') {
      if (!map[token.value]) {
        var update = changeCaseRandomly(token.value);
        map[token.value] = update;
      }
    }
  });
  ast.selectTokensByType('Identifier').forEach(function (token) {
    try {
      if (requiredTokenTypes.includes(token.parentElement.parentElement.type)) {
        if (!map[token.value]) {
          var update = changeCaseRandomly(token.value);
          map[token.value] = update;
        }
        var val = map[token.value];
        token.value = val;
        token._sourceCode = val;
        token._sourceCodeLines = [val];
      } else {
        var _val = map[token.value] || token.value;
        token.value = _val;
        token._sourceCode = _val;
        token._sourceCodeLines = [_val];
      }
    } catch (err) {
      // TODO: handle token errors
      // console.log(err);
    }
  });
}
function changeCaseRandomly(str) {
  var modifiedStr = '';
  for (var i = 0; i < str.length; i++) {
    var randomCase = Math.random() < 0.5 ? 'toUpperCase' : 'toLowerCase';
    modifiedStr += str[i][randomCase]();
  }
  return modifiedStr;
}

function addInconsistentIndentation(code) {
  var lines = code.split('\n');
  for (var i = 0; i < lines.length; i++) {
    var text = lines[i].trim();
    if (text !== '') {
      var indentation = getRandomWhitespace();
      lines[i] = indentation + text;
    }
  }
  return lines.join('\n');
}
function addRandomWhiteSpace(code) {
  code.selectTokensByType('Punctuator').forEach(function (token) {
    try {
      var randomWhitespaceBefore = getRandomWhitespace();
      var prevToken = token.getPreviousToken();
      if (prevToken.isWhitespace) {
        prevToken.value = randomWhitespaceBefore;
        prevToken._sourceCode = randomWhitespaceBefore;
        prevToken._sourceCodeLines = [randomWhitespaceBefore];
      } else {
        var whitespaceBefore = new Token('Whitespace', randomWhitespaceBefore);
        token.parentElement.insertChildBefore(whitespaceBefore, token);
      }
    } catch (err) {
      // TODO: Handle token errors
      // console.log(err);
    }
  });
}
function getRandomWhitespace() {
  var whitespaceOptions = [' ', '  ', '\t', '\t\t', '\t '];
  var randomIndex = Math.floor(Math.random() * whitespaceOptions.length);
  return whitespaceOptions[randomIndex];
}

function shittify(code) {
  var modifiedCode = addInconsistentIndentation(code);
  var cst = new Parser().parse(modifiedCode);
  randomizeCase(cst);
  addRandomWhiteSpace(cst);
  return cst.getSourceCode();
}
var argv = /*#__PURE__*/yargs.usage('Usage: shittier [options] <input> <output>').option('h', {
  alias: 'help',
  describe: 'Show help',
  type: 'boolean'
}).option('f', {
  alias: 'force',
  describe: 'Overwrite the output file if it already exists',
  type: 'boolean'
}).help('h').argv;
if (argv.help) {
  yargs.showHelp();
  process.exit(0);
}
var inputFilePath = argv._[0];
var outputFilePath = argv._[1] || inputFilePath;
// Validate file extension
var supportedExtensions = ['.js'];
var inputFileExtension = /*#__PURE__*/extname(inputFilePath.toString()).toLowerCase();
if (!supportedExtensions.includes(inputFileExtension)) {
  console.error("\u274C ERROR: Unsupported file type. Only JavaScript files are supported currently.");
  process.exit(1);
}
try {
  var code = /*#__PURE__*/readFileSync(inputFilePath, 'utf-8');
  var shittifiedCode = /*#__PURE__*/shittify(code);
  writeFileSync(outputFilePath, shittifiedCode, {
    encoding: 'utf-8',
    flag: argv.force || inputFilePath === outputFilePath ? 'w' : 'wx'
  });
  console.log('Your code has been successfully shittified. üéâ');
} catch (err) {
  if (err instanceof Error) {
    if (err.message.includes('EEXIST')) {
      console.log("\u274C ERROR: " + outputFilePath + " already exists. Use --force to override");
    } else if (err.message.includes('ENOENT')) {
      console.error('‚ùå ERROR: Invalid file path!');
    } else if (err.name === 'SyntaxError') {
      console.log("\u274C ERROR: Can't parse file. Looks like " + inputFilePath + " has syntax errors!");
    }
  }
}
//# sourceMappingURL=shittier.esm.js.map
