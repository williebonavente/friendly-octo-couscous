{"version":3,"file":"shittier.cjs.production.min.js","sources":["../src/utils/cst-formatter/case.ts","../src/utils/cst-formatter/white-space.ts","../src/index.ts"],"sourcesContent":["interface Imap {\n  [key: string]: string;\n}\n\nconst requiredTokenTypes = [\n  'VariableDeclarator',\n  'FunctionDeclaration',\n  'ClassDeclaration',\n];\nconst map: Imap = {};\n\nfunction randomizeCase(ast: any) {\n  ast.selectTokensByType('Identifier').forEach((token: any) => {\n    if (token.parentElement.parentElement.type === 'FunctionDeclaration') {\n      if (!map[token.value]) {\n        const update = changeCaseRandomly(token.value);\n        map[token.value] = update;\n      }\n    }\n  });\n\n  ast.selectTokensByType('Identifier').forEach((token: any) => {\n    try {\n      if (requiredTokenTypes.includes(token.parentElement.parentElement.type)) {\n        if (!map[token.value]) {\n          const update = changeCaseRandomly(token.value);\n          map[token.value] = update;\n        }\n        const val = map[token.value];\n        token.value = val;\n        token._sourceCode = val;\n        token._sourceCodeLines = [val];\n      } else {\n        const val = map[token.value] || token.value;\n        token.value = val;\n        token._sourceCode = val;\n        token._sourceCodeLines = [val];\n      }\n    } catch (err) {\n      // TODO: handle token errors\n      // console.log(err);\n    }\n  });\n}\n\nfunction changeCaseRandomly(str: string) {\n  let modifiedStr = '';\n  for (let i = 0; i < str.length; i++) {\n    const randomCase = Math.random() < 0.5 ? 'toUpperCase' : 'toLowerCase';\n    modifiedStr += str[i][randomCase]();\n  }\n  return modifiedStr;\n}\n\nexport { randomizeCase };\n","import { Token } from 'cst';\n\nfunction addInconsistentIndentation(code: string) {\n  const lines = code.split('\\n');\n  for (let i = 0; i < lines.length; i++) {\n    const text = lines[i].trim();\n\n    if (text !== '') {\n      const indentation = getRandomWhitespace();\n      lines[i] = indentation + text;\n    }\n  }\n  return lines.join('\\n');\n}\n\nfunction addRandomWhiteSpace(code: any) {\n  code.selectTokensByType('Punctuator').forEach((token: any) => {\n    try {\n      const randomWhitespaceBefore = getRandomWhitespace();\n\n      const prevToken = token.getPreviousToken();\n      if (prevToken.isWhitespace) {\n        prevToken.value = randomWhitespaceBefore;\n        prevToken._sourceCode = randomWhitespaceBefore;\n        prevToken._sourceCodeLines = [randomWhitespaceBefore];\n      } else {\n        const whitespaceBefore = new Token(\n          'Whitespace',\n          randomWhitespaceBefore\n        );\n        token.parentElement.insertChildBefore(whitespaceBefore, token);\n      }\n    } catch (err) {\n      // TODO: Handle token errors\n      // console.log(err);\n    }\n  });\n}\n\nfunction getRandomWhitespace() {\n  const whitespaceOptions = [' ', '  ', '\\t', '\\t\\t', '\\t '];\n  const randomIndex = Math.floor(Math.random() * whitespaceOptions.length);\n  return whitespaceOptions[randomIndex];\n}\n\nexport { addInconsistentIndentation, addRandomWhiteSpace };\n","import { Parser } from 'cst';\nimport { readFileSync, writeFileSync } from 'fs';\nimport { extname } from 'path';\nimport yargs from 'yargs';\nimport { randomizeCase } from './utils/cst-formatter/case';\nimport {\n  addInconsistentIndentation,\n  addRandomWhiteSpace,\n} from './utils/cst-formatter/white-space';\n\nfunction shittify(code: string) {\n  const modifiedCode = addInconsistentIndentation(code);\n  const cst = new Parser().parse(modifiedCode);\n  randomizeCase(cst);\n  addRandomWhiteSpace(cst);\n\n  return cst.getSourceCode();\n}\n\nconst argv = yargs\n  .usage('Usage: shittier [options] <input> <output>')\n  .option('h', {\n    alias: 'help',\n    describe: 'Show help',\n    type: 'boolean',\n  })\n  .option('f', {\n    alias: 'force',\n    describe: 'Overwrite the output file if it already exists',\n    type: 'boolean',\n  })\n  .help('h').argv;\nif (argv.help) {\n  yargs.showHelp();\n  process.exit(0);\n}\n\nconst inputFilePath = argv._[0];\nconst outputFilePath = argv._[1] || inputFilePath;\n\n// Validate file extension\nconst supportedExtensions = ['.js'];\nconst inputFileExtension = extname(inputFilePath.toString()).toLowerCase();\n\nif (!supportedExtensions.includes(inputFileExtension)) {\n  console.error(\n    `‚ùå ERROR: Unsupported file type. Only JavaScript files are supported currently.`\n  );\n  process.exit(1);\n}\n\ntry {\n  const code = readFileSync(inputFilePath, 'utf-8');\n  const shittifiedCode = shittify(code);\n  writeFileSync(outputFilePath, shittifiedCode, {\n    encoding: 'utf-8',\n    flag: argv.force || inputFilePath === outputFilePath ? 'w' : 'wx',\n  });\n\n  console.log('Your code has been successfully shittified. üéâ');\n} catch (err) {\n  if (err instanceof Error) {\n    if (err.message.includes('EEXIST')) {\n      console.log(\n        `‚ùå ERROR: ${outputFilePath} already exists. Use --force to override`\n      );\n    } else if (err.message.includes('ENOENT')) {\n      console.error('‚ùå ERROR: Invalid file path!');\n    } else if (err.name === 'SyntaxError') {\n      console.log(\n        `‚ùå ERROR: Can't parse file. Looks like ${inputFilePath} has syntax errors!`\n      );\n    }\n  }\n}\n"],"names":["requiredTokenTypes","map","changeCaseRandomly","str","modifiedStr","i","length","randomCase","Math","random","getRandomWhitespace","whitespaceOptions","floor","shittify","code","ast","modifiedCode","lines","split","text","trim","indentation","join","addInconsistentIndentation","cst","Parser","parse","selectTokensByType","forEach","token","parentElement","type","value","update","includes","val","_sourceCode","_sourceCodeLines","err","randomWhitespaceBefore","prevToken","getPreviousToken","isWhitespace","whitespaceBefore","Token","insertChildBefore","addRandomWhiteSpace","getSourceCode","argv","yargs","usage","option","alias","describe","help","showHelp","process","exit","inputFilePath","_","outputFilePath","extname","toString","toLowerCase","console","error","writeFileSync","readFileSync","encoding","flag","force","log","Error","message","name"],"mappings":"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"}