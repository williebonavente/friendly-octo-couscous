{"version":3,"file":"shittier.esm.js","sources":["../src/utils/cst-formatter/case.ts","../src/utils/cst-formatter/white-space.ts","../src/index.ts"],"sourcesContent":["interface Imap {\n  [key: string]: string;\n}\n\nconst requiredTokenTypes = [\n  'VariableDeclarator',\n  'FunctionDeclaration',\n  'ClassDeclaration',\n];\nconst map: Imap = {};\n\nfunction randomizeCase(ast: any) {\n  ast.selectTokensByType('Identifier').forEach((token: any) => {\n    if (token.parentElement.parentElement.type === 'FunctionDeclaration') {\n      if (!map[token.value]) {\n        const update = changeCaseRandomly(token.value);\n        map[token.value] = update;\n      }\n    }\n  });\n\n  ast.selectTokensByType('Identifier').forEach((token: any) => {\n    try {\n      if (requiredTokenTypes.includes(token.parentElement.parentElement.type)) {\n        if (!map[token.value]) {\n          const update = changeCaseRandomly(token.value);\n          map[token.value] = update;\n        }\n        const val = map[token.value];\n        token.value = val;\n        token._sourceCode = val;\n        token._sourceCodeLines = [val];\n      } else {\n        const val = map[token.value] || token.value;\n        token.value = val;\n        token._sourceCode = val;\n        token._sourceCodeLines = [val];\n      }\n    } catch (err) {\n      // TODO: handle token errors\n      // console.log(err);\n    }\n  });\n}\n\nfunction changeCaseRandomly(str: string) {\n  let modifiedStr = '';\n  for (let i = 0; i < str.length; i++) {\n    const randomCase = Math.random() < 0.5 ? 'toUpperCase' : 'toLowerCase';\n    modifiedStr += str[i][randomCase]();\n  }\n  return modifiedStr;\n}\n\nexport { randomizeCase };\n","import { Token } from 'cst';\n\nfunction addInconsistentIndentation(code: string) {\n  const lines = code.split('\\n');\n  for (let i = 0; i < lines.length; i++) {\n    const text = lines[i].trim();\n\n    if (text !== '') {\n      const indentation = getRandomWhitespace();\n      lines[i] = indentation + text;\n    }\n  }\n  return lines.join('\\n');\n}\n\nfunction addRandomWhiteSpace(code: any) {\n  code.selectTokensByType('Punctuator').forEach((token: any) => {\n    try {\n      const randomWhitespaceBefore = getRandomWhitespace();\n\n      const prevToken = token.getPreviousToken();\n      if (prevToken.isWhitespace) {\n        prevToken.value = randomWhitespaceBefore;\n        prevToken._sourceCode = randomWhitespaceBefore;\n        prevToken._sourceCodeLines = [randomWhitespaceBefore];\n      } else {\n        const whitespaceBefore = new Token(\n          'Whitespace',\n          randomWhitespaceBefore\n        );\n        token.parentElement.insertChildBefore(whitespaceBefore, token);\n      }\n    } catch (err) {\n      // TODO: Handle token errors\n      // console.log(err);\n    }\n  });\n}\n\nfunction getRandomWhitespace() {\n  const whitespaceOptions = [' ', '  ', '\\t', '\\t\\t', '\\t '];\n  const randomIndex = Math.floor(Math.random() * whitespaceOptions.length);\n  return whitespaceOptions[randomIndex];\n}\n\nexport { addInconsistentIndentation, addRandomWhiteSpace };\n","import { Parser } from 'cst';\nimport { readFileSync, writeFileSync } from 'fs';\nimport { extname } from 'path';\nimport yargs from 'yargs';\nimport { randomizeCase } from './utils/cst-formatter/case';\nimport {\n  addInconsistentIndentation,\n  addRandomWhiteSpace,\n} from './utils/cst-formatter/white-space';\n\nfunction shittify(code: string) {\n  const modifiedCode = addInconsistentIndentation(code);\n  const cst = new Parser().parse(modifiedCode);\n  randomizeCase(cst);\n  addRandomWhiteSpace(cst);\n\n  return cst.getSourceCode();\n}\n\nconst argv = yargs\n  .usage('Usage: shittier [options] <input> <output>')\n  .option('h', {\n    alias: 'help',\n    describe: 'Show help',\n    type: 'boolean',\n  })\n  .option('f', {\n    alias: 'force',\n    describe: 'Overwrite the output file if it already exists',\n    type: 'boolean',\n  })\n  .help('h').argv;\nif (argv.help) {\n  yargs.showHelp();\n  process.exit(0);\n}\n\nconst inputFilePath = argv._[0];\nconst outputFilePath = argv._[1] || inputFilePath;\n\n// Validate file extension\nconst supportedExtensions = ['.js'];\nconst inputFileExtension = extname(inputFilePath.toString()).toLowerCase();\n\nif (!supportedExtensions.includes(inputFileExtension)) {\n  console.error(\n    `‚ùå ERROR: Unsupported file type. Only JavaScript files are supported currently.`\n  );\n  process.exit(1);\n}\n\ntry {\n  const code = readFileSync(inputFilePath, 'utf-8');\n  const shittifiedCode = shittify(code);\n  writeFileSync(outputFilePath, shittifiedCode, {\n    encoding: 'utf-8',\n    flag: argv.force || inputFilePath === outputFilePath ? 'w' : 'wx',\n  });\n\n  console.log('Your code has been successfully shittified. üéâ');\n} catch (err) {\n  if (err instanceof Error) {\n    if (err.message.includes('EEXIST')) {\n      console.log(\n        `‚ùå ERROR: ${outputFilePath} already exists. Use --force to override`\n      );\n    } else if (err.message.includes('ENOENT')) {\n      console.error('‚ùå ERROR: Invalid file path!');\n    } else if (err.name === 'SyntaxError') {\n      console.log(\n        `‚ùå ERROR: Can't parse file. Looks like ${inputFilePath} has syntax errors!`\n      );\n    }\n  }\n}\n"],"names":["requiredTokenTypes","map","randomizeCase","ast","selectTokensByType","forEach","token","parentElement","type","value","update","changeCaseRandomly","includes","val","_sourceCode","_sourceCodeLines","err","str","modifiedStr","i","length","randomCase","Math","random","addInconsistentIndentation","code","lines","split","text","trim","indentation","getRandomWhitespace","join","addRandomWhiteSpace","randomWhitespaceBefore","prevToken","getPreviousToken","isWhitespace","whitespaceBefore","Token","insertChildBefore","whitespaceOptions","randomIndex","floor","shittify","modifiedCode","cst","Parser","parse","getSourceCode","argv","yargs","usage","option","alias","describe","help","showHelp","process","exit","inputFilePath","_","outputFilePath","supportedExtensions","inputFileExtension","extname","toString","toLowerCase","console","error","readFileSync","shittifiedCode","writeFileSync","encoding","flag","force","log","Error","message","name"],"mappings":"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"}